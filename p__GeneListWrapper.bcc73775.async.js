(self.webpackChunkrapex_studio=self.webpackChunkrapex_studio||[]).push([[962],{98361:function(J,B,r){"use strict";var v=r(13254),h=r(14277),E=r(2824),z=r(43358),H=r(34041),b=r(96486),q=r.n(b),x=r(67294),_=r(85893),A=H.Z.Option,M,p;function Y(t,n,e){console.log("makeQueryStr filter: ",e);var u=":select [:*]",a="",I="";if(n){var P=Object.keys(n)[0],w=Object.values(n)[0];P&&w&&(w==="ascend"?a=":order-by [:".concat(P,"]"):a=":order-by [[:".concat(P," :desc]]"))}if(t){for(var G=[],Z=0,K=Object.keys(t);Z<K.length;Z++){var i=K[Z];["current","pageSize"].indexOf(i)<0&&t[i].length>0&&G.push("[:like [:upper :".concat(i,'] [:upper "%').concat(t[i],'%"]]'))}G.length==1?I=":where ".concat(G[0]):G.length>1&&(I=":where [:or ".concat(G.join(" "),"]"))}return"{".concat(u," ").concat(a," ").concat(I,"}")}var R=function(n){var e=n.queryGenes,u=n.initialValue,a=(0,x.useState)([]),I=(0,E.Z)(a,2),P=I[0],w=I[1],G=(0,x.useState)([]),Z=(0,E.Z)(G,2),K=Z[0],i=Z[1],S=(0,x.useState)(),T=(0,E.Z)(S,2),F=T[0],L=T[1];(0,x.useEffect)(function(){u&&u!==F&&(L(u),f(u,function(m){i(m),d(u,{})}))},[u]);var f=function(s,o){M&&(clearTimeout(M),M=null),p=s;var O=function(){e({query_str:Y({gene_symbol:s,ensembl_id:s,entrez_id:s},{},{})}).then(function(j){if(p===s){var C=j.data,D=C.map(function(c){return{value:c.ensembl_id,text:"".concat(c.gene_symbol," | ").concat(c.entrez_id," | ").concat(c.ensembl_id)}});o(D),w(C)}}).catch(function(j){console.log("requestDEGs Error: ",j),o([])})};M=setTimeout(O,300)},U=function(s){s?f(s,i):i([])},d=function(s,o){if(L(s),console.log("GeneSearcher handleChange: ",s),s&&typeof s=="string"){var O,N=(0,b.filter)(P,function(C){return s.match(/ENS/i)?C.ensembl_id==s:s.match(/[a-zA-Z][a-zA-Z0-9]+/i)?C.gene_symbol==s:s.match(/[0-9]+/i)?C.entrez_id.toString()==s:!1});console.log("handleChange(GeneSearcher): ",N,P),(O=n.onChange)===null||O===void 0||O.call(n,s,N[0])}else{var j;(j=n.onChange)===null||j===void 0||j.call(n,s,void 0)}},g=K.map(function(m){return(0,_.jsx)(A,{children:m.text},m.value)});return(0,_.jsx)(H.Z,{allowClear:!0,showSearch:!0,value:F,placeholder:n==null?void 0:n.placeholder,style:n.style,defaultActiveFirstOption:!1,showArrow:!0,filterOption:!1,onSearch:U,onChange:d,mode:n!=null&&n.mode?n==null?void 0:n.mode:"single",notFoundContent:(0,_.jsx)(h.Z,{description:"Searching ..."}),children:g})};B.Z=R},10128:function(J,B,r){"use strict";r.r(B),r.d(B,{default:function(){return K}});var v=r(13062),h=r(71230),E=r(34792),z=r(48086),H=r(93224),b=r(2824),q=r(39428),x=r(3182),_=r(8870),A=r(82120),M=r(83461),p=r(67294),Y=r(51615),R=r(98361),t=r(74310);function n(i,S,T){console.log("makeQueryStr filter: ",T);var F=":select [:*]",L="",f="";if(S){var U=Object.keys(S)[0],d=Object.values(S)[0];U&&d&&(d==="ascend"?L=":order-by [:".concat(U,"]"):L=":order-by [[:".concat(U," :desc]]"))}if(i){for(var g=[],m=0,s=Object.keys(i);m<s.length;m++){var o=s[m];o=="queried_id"&&i[o].length>0&&(i[o].match(/ENS/i)?g.push('[:like [:upper :ensembl_id] [:upper "%'.concat(i[o],'%"]]')):i[o].match(/[a-zA-Z][a-zA-Z0-9]+/i)?g.push('[:like [:upper :gene_symbol] [:upper "%'.concat(i[o],'%"]]')):i[o].match(/[0-9]+/i)&&g.push('[:like [:upper :entrez_id] [:upper "%'.concat(i[o],'%"]]'))),["current","pageSize","queried_id","dataset"].indexOf(o)<0&&i[o].length>0&&g.push("[:like [:upper :".concat(o,'] [:upper "%').concat(i[o],'%"]]'))}g.length==1?f=":where ".concat(g[0]):g.length>1&&(f=":where [:and ".concat(g.join(" "),"]"))}return"{".concat(F," ").concat(L," ").concat(f,"}")}var e=r(85893),u=["type","defaultRender"];function a(i){return Promise.resolve((0,_.Z)((0,_.Z)({},i),{},{success:!0}))}var I=function(S){var T=(0,Y.k6)(),F=S.queryDEGs,L=S.queryGenes,f=S.queryGeneBaseUrl,U=(0,t.tT)("@@initialState"),d=U.initialState,g={};d!=null&&d.defaultDataset&&(g[d==null?void 0:d.defaultDataset]={text:d==null?void 0:d.defaultDataset});var m=function(){var D=(0,x.Z)((0,q.Z)().mark(function c(l,W,Q){return(0,q.Z)().wrap(function(y){for(;;)switch(y.prev=y.next){case 0:if(console.log("requestDEGs: ",W,Q),!(l.method&&l.datatype&&l.organ)){y.next=7;break}return y.next=4,F({page:l.current,page_size:l.pageSize,query_str:n(l,W,Q),dataset:"".concat(l.dataset)}).then(function(X){return a(X)}).catch(function(X){return console.log("requestDEGs Error: ",X),a({total:0,page:1,page_size:10,data:[]})});case 4:return y.abrupt("return",y.sent);case 7:return y.abrupt("return",a({total:0,page:1,page_size:10,data:[]}));case 8:case"end":return y.stop()}},c)}));return function(l,W,Q){return D.apply(this,arguments)}}(),s=(0,p.useRef)(),o=(0,p.useState)([]),O=(0,b.Z)(o,2),N=O[0],j=O[1],C=[{title:(0,e.jsx)(t._H,{id:"pages.GeneList.gene",defaultMessage:"Gene"}),dataIndex:"queried_id",sorter:!0,hideInForm:!0,hideInSetting:!0,hideInTable:!0,fieldProps:{placeholder:"Please input a gene symbol, ensembl id or entrez id."},tip:"Ensembl gene IDs begin with ENS for Ensembl, and then a G for gene.",renderFormItem:function(c,l,W){var Q=l.type,$=l.defaultRender,y=(0,H.Z)(l,u);return Q==="form"?null:(0,e.jsx)(R.Z,(0,_.Z)((0,_.Z)({queryGenes:L},y),{},{style:{width:"280px"}}))}},{title:(0,e.jsx)(t._H,{id:"pages.GeneList.ensemblId",defaultMessage:"Ensembl ID"}),dataIndex:"ensembl_id",sorter:!0,hideInSearch:!0,width:"180px",tip:"Ensembl gene IDs begin with ENS for Ensembl, and then a G for gene.",render:function(c,l){return(0,e.jsx)("a",{onClick:function(){f?T.push("".concat(f).concat(l.ensembl_id)):console.log("You need to set queryGeneBaseUrl.")},children:c})}},{title:(0,e.jsx)(t._H,{id:"pages.GeneList.entrezId",defaultMessage:"Entrez ID"}),align:"center",sorter:!0,hideInSearch:!0,dataIndex:"entrez_id",tip:"Entrez Gene provides unique integer identifiers for genes and other loci.",render:function(c,l){return(0,e.jsx)("a",{onClick:function(){f?T.push("".concat(f).concat(l.ensembl_id)):console.log("You need to set queryGeneBaseUrl.")},children:c})}},{title:(0,e.jsx)(t._H,{id:"pages.GeneList.geneSymbol",defaultMessage:"Gene Symbol"}),align:"center",dataIndex:"gene_symbol",hideInSearch:!0,sorter:!0,tip:"A gene symbol is a short-form abbreviation for a particular gene.",render:function(c,l){return(0,e.jsx)("a",{onClick:function(){f?T.push("".concat(f).concat(l.ensembl_id)):console.log("You need to set queryGeneBaseUrl.")},children:c})}},{title:(0,e.jsx)(t._H,{id:"pages.GeneList.organ",defaultMessage:"Organ"}),align:"center",dataIndex:"organ",sorter:!0,tip:"Organ name.",valueType:"select",formItemProps:{required:!0},valueEnum:{gut:{text:"Gut"},kdn:{text:"Kidney"},hrt:{text:"Heart"},lng:{text:"Lung"},lvr:{text:"Liver"},tst:{text:"Testis"},tyr:{text:"Thyroid"},brn:{text:"Brain"}}},{title:(0,e.jsx)(t._H,{id:"pages.GeneList.method",defaultMessage:"Method"}),align:"center",dataIndex:"method",sorter:!0,valueType:"select",formItemProps:{required:!0},valueEnum:{ttest:{text:"T Test"},wilcox:{text:"Wilcox Test"},limma:{text:"Limma"}},tip:"Stat method, such as ttest, wilcox."},{title:(0,e.jsx)(t._H,{id:"pages.GeneList.datatype",defaultMessage:"Data Type"}),align:"center",dataIndex:"datatype",sorter:!0,tip:"Data type, such as FPKM, TPM, Counts.",valueType:"select",formItemProps:{required:!0},valueEnum:{fpkm:{text:"FPKM"},tpm:{text:"TPM"},counts:{text:"Counts"}}},{title:(0,e.jsx)(t._H,{id:"pages.GeneList.dataset",defaultMessage:"Dataset"}),align:"center",dataIndex:"dataset",valueType:"select",valueEnum:g,initialValue:"000000"},{title:(0,e.jsx)(t._H,{id:"pages.GeneList.pAdj",defaultMessage:"AdjPvalue"}),align:"center",hideInSearch:!0,dataIndex:"padj",sorter:!0},{title:(0,e.jsx)(t._H,{id:"pages.GeneList.pvalue",defaultMessage:"Pvalue"}),align:"center",hideInSearch:!0,dataIndex:"pvalue",width:"80px",sorter:!0},{title:(0,e.jsx)(t._H,{id:"pages.GeneList.logfc",defaultMessage:"LogFC"}),align:"center",hideInSearch:!0,dataIndex:"logfc",sorter:!0,width:"80px",tip:"Log fold change = log(FC) Usually, the transformation is log at base 2, so the interpretation is straightforward: a log(FC) of 1 means twice as expressed."},{title:(0,e.jsx)(t._H,{id:"pages.GeneList.direction",defaultMessage:"Direction"}),align:"center",dataIndex:"direction",hideInSearch:!0,sorter:!0,width:"100px",tip:"`Up` means up-regulated, `Down` means down-regulated and `No` means no difference.",valueType:"select",valueEnum:{up:{text:"Up"},down:{text:"Down"},no:{text:"No"}}}];return(0,e.jsx)(h.Z,{className:"genelist",children:(0,e.jsx)(A.Z,{scroll:{y:"calc(100vh - 200px)"},className:"genelist__table",actionRef:s,rowKey:"id",search:{labelWidth:120,showHiddenNum:!0,defaultCollapsed:!1,searchText:(0,e.jsx)(t._H,{id:"pages.GeneList.analyze",defaultMessage:"Analyze"})},pagination:{showQuickJumper:!0,position:["topLeft"]},locale:{emptyText:(0,e.jsx)("b",{children:(0,e.jsx)(t._H,{id:"pages.GeneList.nodata",defaultMessage:"Please input the parameters for analyzing diff genes."})})},cardBordered:!0,request:m,columns:C,rowSelection:{onChange:function(c,l){j(l)}},toolbar:{actions:[(0,e.jsx)(M.CSVLink,{data:N,filename:"download-degs.csv",onClick:function(){return N.length==0?(z.ZP.warn("Please select records firstly."),!1):!0},children:(0,e.jsx)(t._H,{id:"pages.GeneList.download",defaultMessage:"Download"})})]}})})},P=(0,p.memo)(I),w=r(32266),G=r(10224),Z=function(){return(0,e.jsxs)(h.Z,{className:"gene-list-wrapper",children:[(0,e.jsx)(G.Z,{position:"center",title:"Differential Genes",children:(0,e.jsxs)("p",{children:["After selecting the dataset in the red box in the upper right corner, you can use the user-defined parameters in the data set range to obtain dynamic data tables.",(0,e.jsx)("br",{}),(0,e.jsx)("b",{children:"Gene:"})," Select a gene of interest. You can input ensembl_id, gene_symbol or entrez_id for analyzing. (e.g. Dgat2, 67800 or ENSMUSG00000030747)",(0,e.jsx)("br",{}),(0,e.jsx)("b",{children:"Organ:"})," Select an organ of interest.",(0,e.jsx)("br",{}),(0,e.jsx)("b",{children:"Method:"})," Select a method, such as ttest, wilcox, or Limma.",(0,e.jsx)("br",{}),(0,e.jsx)("b",{children:"DataType:"})," Select a data type, such as FPKM, TPM, or Counts.",(0,e.jsx)("br",{}),(0,e.jsx)("b",{children:"DataSet:"})," Click the red box in the upper right corner of the page to select the data set you are interested in, and then select the data set from the drop-down menu here."]})}),(0,e.jsx)(P,{queryDEGs:w.zn,queryGenes:w.VX,queryGeneBaseUrl:"/expression-analysis/single-gene?ensemblId="})]})},K=(0,p.memo)(Z)},32266:function(J,B,r){"use strict";r.d(B,{zn:function(){return H},VX:function(){return _},dy:function(){return M},Ce:function(){return Y}});var v=r(39428),h=r(8870),E=r(3182),z=r(74310);function H(t,n){return b.apply(this,arguments)}function b(){return b=(0,E.Z)((0,v.Z)().mark(function t(n,e){return(0,v.Z)().wrap(function(a){for(;;)switch(a.prev=a.next){case 0:return a.abrupt("return",(0,z.WY)("/api/v1/degs",(0,h.Z)({method:"GET",params:(0,h.Z)({},n)},e||{})));case 1:case"end":return a.stop()}},t)})),b.apply(this,arguments)}function q(t,n){return x.apply(this,arguments)}function x(){return x=_asyncToGenerator(_regeneratorRuntime().mark(function t(n,e){return _regeneratorRuntime().wrap(function(a){for(;;)switch(a.prev=a.next){case 0:return a.abrupt("return",request("/api/v1/gene-expr-data",_objectSpread({method:"GET",params:_objectSpread({},n)},e||{})));case 1:case"end":return a.stop()}},t)})),x.apply(this,arguments)}function _(t,n){return A.apply(this,arguments)}function A(){return A=(0,E.Z)((0,v.Z)().mark(function t(n,e){return(0,v.Z)().wrap(function(a){for(;;)switch(a.prev=a.next){case 0:return a.abrupt("return",(0,z.WY)("/api/v1/genes",(0,h.Z)({method:"GET",params:(0,h.Z)({},n)},e||{})));case 1:case"end":return a.stop()}},t)})),A.apply(this,arguments)}function M(t,n){return p.apply(this,arguments)}function p(){return p=(0,E.Z)((0,v.Z)().mark(function t(n,e){return(0,v.Z)().wrap(function(a){for(;;)switch(a.prev=a.next){case 0:return a.abrupt("return",(0,z.WY)("/api/v1/pathways",(0,h.Z)({method:"GET",params:(0,h.Z)({},n)},e||{})));case 1:case"end":return a.stop()}},t)})),p.apply(this,arguments)}function Y(t,n){return R.apply(this,arguments)}function R(){return R=(0,E.Z)((0,v.Z)().mark(function t(n,e){return(0,v.Z)().wrap(function(a){for(;;)switch(a.prev=a.next){case 0:return a.abrupt("return",(0,z.WY)("/api/v1/similar-genes",(0,h.Z)({method:"GET",params:(0,h.Z)({},n)},e||{})));case 1:case"end":return a.stop()}},t)})),R.apply(this,arguments)}}}]);
